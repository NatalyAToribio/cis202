/* 
    File: main.cpp 
    Description: 11.1: Lambda functions and a Pizza Order Sorter
    Author: Nataly Ashlee Toribio
    Email: natalyt1016@student.vvc.edu
    Course#: cis202
    Section#: <30002>
    Date: 6/1/2025
*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

struct PizzaOrder {
    std::string name;
    int size;
};

struct PizzaOrderWithPrice {
    std::string name;
    int size;
    double price;
};

int main() {
    std::vector<PizzaOrder> orders = {
        {"Alice", 12},
        {"Bob", 16},
        {"Charlie", 10},
        {"Diana", 14}
    };

    std::vector<PizzaOrderWithPrice> ordersWithPrice = {
        {"Alice", 12, 11.99},
        {"Bob", 16, 15.49},
        {"Charlie", 10, 9.99},
        {"Diana", 14, 13.75}
    };

    std::cout << "\n";

    std::cout << "Original Pizza Orders:\n";
    for (const auto& order : orders) {
        std::cout << order.name << " " << order.size << " inches\n";
    }

    std::cout << "\nSorted by Size (Ascending):\n";
    std::sort(orders.begin(), orders.end(), [](const PizzaOrder& a, const PizzaOrder& b) {
        return a.size < b.size;
    });
    for (const auto& order : orders) {
        std::cout << order.name << " " << order.size << " inches\n";
    }

    std::cout << "\nSorted by Name (Alphabetical):\n";
    std::sort(orders.begin(), orders.end(), [](const PizzaOrder& a, const PizzaOrder& b) {
        return a.name < b.name;
    });
    for (const auto& order : orders) {
        std::cout << order.name << " " << order.size << " inches\n";
    }

    std::cout << "\nSorted by Price (Ascending):\n";
    std::sort(ordersWithPrice.begin(), ordersWithPrice.end(), [](const PizzaOrderWithPrice& a, const PizzaOrderWithPrice& b) {
        return a.price < b.price;
    });
for (size_t i = 0; i < ordersWithPrice.size(); ++i) {
    const auto& order = ordersWithPrice[i];
    std::cout << order.name << " " << order.size << " inches $"
              << std::fixed << std::setprecision(2) << order.price;
    if (i != ordersWithPrice.size() - 1) std::cout << '\n';
}

    return 0;
}
